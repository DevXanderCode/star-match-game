{"version":3,"sources":["components/Math-utils.js","components/StarsDisplay.js","components/PlayNumber.js","components/PlayAgain.js","components/Game.js","StarMatchGame.js","serviceWorker.js","index.js"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","StarsDisplay","props","count","map","starId","key","className","color","available","used","wrong","candidate","PlayNumber","style","backgroundColor","status","onClick","number","PlayAgain","gameStatus","Game","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timeId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","cn","startNewGame","StarMatchGame","gameId","setGameId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f76f72b.chunk.js","sourcesContent":["// Math Science\r\nconst utils = {\r\n  // sum an array\r\n  sum: (arr) => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n  //create an array of numbers between min and max (edges included)\r\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n  // pick a random number between min and max (edges included)\r\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n  // Given an array of numbers and a max\r\n  // pick a random sum( < max) from the set of all available sums in the array\r\n  randomSumIn: (arr, max) => {\r\n    const sets = [[]];\r\n    const sums = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n      for (let j = 0, len = sets.length; j < len; j++) {\r\n        const candidateSet = sets[j].concat(arr[i]);\r\n        const candidateSum = utils.sum(candidateSet);\r\n        if (candidateSum <= max) {\r\n          sets.push(candidateSet);\r\n          sums.push(candidateSum);\r\n        }\r\n      }\r\n    }\r\n    return sums[utils.random(0, sums.length - 1)];\r\n  },\r\n};\r\n\r\nexport default utils;\r\n","import React from \"react\";\r\n\r\nimport utils from \"./Math-utils\";\r\n\r\nconst StarsDisplay = (props) => (\r\n  <>\r\n    {utils.range(1, props.count).map((starId) => (\r\n      <div key={starId} className=\"star\" />\r\n    ))}\r\n  </>\r\n);\r\n\r\nexport default StarsDisplay;\r\n","import React from \"react\";\r\n\r\nconst PlayNumber = (props) => (\r\n  <button\r\n    className=\"number\"\r\n    style={{ backgroundColor: color[props.status] }}\r\n    onClick={() => props.onClick(props.number, props.status)}\r\n  >\r\n    {props.number}\r\n  </button>\r\n);\r\n\r\n// Color Theme\r\nconst color = {\r\n  available: \"lightgray\",\r\n  used: \"lightgreen\",\r\n  wrong: \"lightCoral\",\r\n  candidate: \"deepskyblue\",\r\n};\r\n\r\nexport default PlayNumber;\r\n","import React from \"react\";\r\n\r\nconst PlayAgain = (props) => (\r\n  <div className=\"game-done\">\r\n    <div\r\n      className=\"message\"\r\n      style={{ color: props.gameStatus === \"lost\" ? \"red\" : \"green\" }}\r\n    >\r\n      {props.gameStatus === \"lost\" ? \"Game Over\" : \"Nice!!\"}\r\n    </div>\r\n    <button onClick={props.onClick}>Play Again</button>\r\n  </div>\r\n);\r\n\r\nexport default PlayAgain;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport utils from \"./Math-utils\";\r\n\r\nimport StarsDisplay from \"./StarsDisplay\";\r\nimport PlayNumber from \"./PlayNumber\";\r\nimport PlayAgain from \"./PlayAgain\";\r\n\r\nconst useGameState = () => {\r\n  const [stars, setStars] = useState(utils.random(1, 9));\r\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n  const [candidateNums, setCandidateNums] = useState([]);\r\n  const [secondsLeft, setSecondsLeft] = useState(10);\r\n\r\n  useEffect(() => {\r\n    if (secondsLeft > 0 && availableNums.length > 0) {\r\n      const timeId = setTimeout(() => setSecondsLeft(secondsLeft - 1), 1000);\r\n      return () => clearTimeout(timeId);\r\n    }\r\n  });\r\n\r\n  const setGameState = (newCandidateNums) => {\r\n    if (utils.sum(newCandidateNums) !== stars) {\r\n      setCandidateNums(newCandidateNums);\r\n    } else {\r\n      const newAvailableNums = availableNums.filter(\r\n        (n) => !newCandidateNums.includes(n)\r\n      );\r\n      setStars(utils.randomSumIn(newAvailableNums, 9));\r\n      setAvailableNums(newAvailableNums);\r\n      setCandidateNums([]);\r\n    }\r\n  };\r\n  return { stars, availableNums, candidateNums, secondsLeft, setGameState };\r\n};\r\n\r\nconst Game = (props) => {\r\n  const {\r\n    stars,\r\n    availableNums,\r\n    candidateNums,\r\n    secondsLeft,\r\n    setGameState,\r\n  } = useGameState();\r\n\r\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n\r\n  const gameStatus =\r\n    availableNums.length === 0 ? \"won\" : secondsLeft === 0 ? \"lost\" : \"active\";\r\n\r\n  const numberStatus = (number) => {\r\n    if (!availableNums.includes(number)) return \"used\";\r\n    if (candidateNums.includes(number))\r\n      return candidatesAreWrong ? \"wrong\" : \"candidate\";\r\n    return \"available\";\r\n  };\r\n\r\n  const onNumberClick = (number, currentStatus) => {\r\n    if (currentStatus === \"used\" || secondsLeft === 0) return;\r\n\r\n    const newCandidateNums =\r\n      currentStatus === \"available\"\r\n        ? candidateNums.concat(number)\r\n        : candidateNums.filter((cn) => cn !== number);\r\n\r\n    setGameState(newCandidateNums);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"help\">\r\n        pick 1 or more numbers that matches the number of stars\r\n      </div>\r\n      <div className=\"body\">\r\n        <div className=\"left\">\r\n          {gameStatus !== \"active\" ? (\r\n            <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />\r\n          ) : (\r\n            <StarsDisplay count={stars} />\r\n          )}\r\n        </div>\r\n        <div className=\"right\">\r\n          {utils.range(1, 9).map((number) => (\r\n            <PlayNumber\r\n              key={number}\r\n              status={numberStatus(number)}\r\n              number={number}\r\n              onClick={onNumberClick}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"timer\">Time remaining: {secondsLeft}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React, { useState } from \"react\";\n\nimport Game from \"./components/Game\";\nimport \"./App.css\";\n\nconst StarMatchGame = () => {\n  const [gameId, setGameId] = useState(1);\n  return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />;\n};\nexport default StarMatchGame;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport StarMatchGame from \"./StarMatchGame\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StarMatchGame />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}